//
//  SRP.swift
//  HAP
//
//  Created by Bouke Haarsma on 29-06-16.
//
//

import CSRP
import Foundation

/**
    A Verifier object is used to verify the identity of a remote user.
 */
public class Verifier {
    internal let boxed: OpaquePointer
    internal let salt: Data
    internal let B: Data

    /**
        Instantiates a Verifier object.

        - Parameters:
            - algorithm: (Optional) which algorithm to use
            - ngType: (Optional) which Number Generator (prime) to use
            - username: the user's username
            - salt: the user's salt generated by createSaltedVerificationKey
            - verificationKey: the user's verification key generated by createSaltedVerificationKey
            - A: the user's public ephemeral value
     */
    public init(algorithm: SRP_HashAlgorithm = SRP_SHA1, ngType: SRP_NGType = SRP_NG_2048, username: String, salt: Data, verificationKey: Data, A: Data) throws {
        var bytes_B: UnsafePointer<UInt8>? = nil
        var len_B: Int32 = 0

        let bytes_s = Array(salt)
        let verificationKey = Array(verificationKey)
        let A = Array(A)

        boxed = srp_verifier_new(algorithm, ngType, username, bytes_s, Int32(bytes_s.count), verificationKey, Int32(verificationKey.count), A, Int32(A.count), &bytes_B, &len_B, nil, nil)!
        guard bytes_B != nil else { throw Error.authenticationFailed }
        self.salt = salt
        B = Data(bytes: bytes_B!, count: Int(len_B))
    }

    deinit {
        srp_verifier_delete(boxed)
    }

    /**
        Return True if the authentication succeeded. False otherwise.
    */
    public var isAuthenticated: Bool {
        return srp_verifier_is_authenticated(boxed) == 1
    }

    /**
        Return the name of the user this Verifier object is for.
    */
    public var username: String {
        return String(cString: srp_verifier_get_username(boxed))
    }

    /**
        Return the session key for an authenticated user or None if the authentication failed or has not yet completed.
    */
    public var sessionKey: Data {
        var key_length: Int32 = 0
        return Data(bytes: srp_verifier_get_session_key(boxed, &key_length), count: Int(key_length))
    }

    /**
        Return (s, B)
    */
    public var challenge: (salt: Data, B: Data) {
        return (salt, B)
    }

    /**
        Complete the Verifier side of the authentication process. If the authentication succeded the return result, H_AMK should be returned to the remote user. On failure, this method returns None.
    */
    public func verifySession(user_M: Data) throws -> Data {
        var bytes_H_AMK: UnsafePointer<UInt8>? = nil
        let user_M = Array(user_M)
        srp_verifier_verify_session(boxed, user_M, &bytes_H_AMK)
        guard bytes_H_AMK != nil else { throw Error.authenticationFailed }
        return Data(bytes: bytes_H_AMK!, count: Int(srp_verifier_get_session_key_length(boxed)))
    }
}
